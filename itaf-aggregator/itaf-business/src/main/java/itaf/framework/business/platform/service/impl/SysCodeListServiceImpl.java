package itaf.framework.business.platform.service.impl;import itaf.framework.business.base.service.impl.BaseServiceImpl;import itaf.framework.business.platform.service.ISysCodeListService;import itaf.framework.business.platform.service.ISysCodeTypeService;import itaf.framework.core.common.PageResult;import itaf.framework.core.common.QueryCriteria;import itaf.framework.domain.platform.SysCodeList;import itaf.framework.domain.platform.SysCodeType;import itaf.framework.exception.bean.BusinessException;import itaf.framework.persistence.platform.dao.ISysCodeListDao;import itaf.framework.persistence.util.HqlUtils;import java.util.List;import java.util.Map;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.util.Assert;@Service("sysCodeListServiceImpl")public class SysCodeListServiceImpl extends BaseServiceImpl implements		ISysCodeListService {	@Autowired	private ISysCodeListDao codeListDao;	@Autowired	private ISysCodeTypeService codeTypeService;	public SysCodeList doCreate(SysCodeList sysCodeList) {		checkCodeListValue(sysCodeList);		Long codeTypeId = sysCodeList.getSysCodeTypeId();		SysCodeType sysCodeType = codeTypeService.findById(codeTypeId);		sysCodeList.setSysCodeType(sysCodeType);		// sysCodeList.setSysCodeTypeId(codeTypeId);		codeListDao.save(sysCodeList);		return sysCodeList;	}	private void checkCodeListValue(SysCodeList sysCodeList) {		if (sysCodeList == null) {			log.error("编码常量为null，无法添加！");			throw new BusinessException("BE0002");		}		if (StringUtils.trimToNull(sysCodeList.getNameZh()) == null) {			log.error("编码名称(中文)必须填写！");			throw new BusinessException("BE0004");		}		if (StringUtils.trimToNull(sysCodeList.getNameEn()) == null) {			log.error("编码名称(英文)必须填写！");			throw new BusinessException("BE0005");		}		if (StringUtils.trimToNull(sysCodeList.getCodeValue()) == null) {			log.error("编码值必须填写！");			throw new BusinessException("BE0006");		}		if (sysCodeList.getSortNo() == null || sysCodeList.getSortNo() <= 0) {			log.error("编码顺序号必须填写！");			throw new BusinessException("BE0007");		}	}	public void doDelete(SysCodeList sysCodeList) {		if (sysCodeList == null) {			log.error("没有找到对应的编码常量！");			throw new BusinessException("BE0008");		}		// Long currSortNo = sysCodeList.getSortNo();		// Long codeTypeId = sysCodeList.getSysCodeTypeId();		codeListDao.remove(sysCodeList);		// codeListDao.updateSortNo4Delete(currSortNo, codeTypeId);	}	public PageResult<SysCodeList> findByCriteria(QueryCriteria criteria) {		String queryEntry = "select t";		String[] whereBodies = new String[] { "t.sysCodeTypeId=:codeTypeId",				"t.nameZh=:nameZh" };		String fromJoinSubClause = "from SysCodeList t";		Map<String, Object> params = criteria.getQueryCondition();		String orderField = criteria.getOrderField();		String orderDirection = criteria.getOrderDirection();		String hql = HqlUtils.generateHql(queryEntry, fromJoinSubClause,				whereBodies, orderField, orderDirection, params);		int pageSize = criteria.getPageSize();		int startIndex = criteria.getStartIndex();		PageResult<SysCodeList> result = (PageResult<SysCodeList>) codeListDao				.query(hql, HqlUtils.generateCountHql(hql, null), params,						startIndex, pageSize);		return result;	}	public SysCodeList findByName(String type, String name) {		Assert.notNull(type);		Assert.notNull(name);		return codeListDao.findByName(type, name);	}	public SysCodeList getById(Long id) {		return codeListDao.getById(id);	}	public List<SysCodeList> findAll() {		return codeListDao.findAll();	}	public void doUpdate(SysCodeList sysCodeList) {		// int oldSortNo = codeListDao.findSortNoById(sysCodeList.getId());		// int newSortNo = sysCodeList.getSortNo();		// // 如果序号没有变化，就直接保存返回		// if (oldSortNo == newSortNo) {		// codeListDao.save(sysCodeList);		// return;		// }		// // 获取最大编号		// int maxSortNo = codeListDao.findMaxSortNoByTypeId(sysCodeList		// .getSysCodeTypeId());		// // 如果有变化就进行更新		// codeListDao.updateSortNo4Update(oldSortNo, newSortNo,		// sysCodeList.getSysCodeTypeId());		// // 如果新编号大于最大的编号，把最大的编号设置给sysCodeList		// if (newSortNo > maxSortNo) {		// sysCodeList.setSortNo(maxSortNo);		// }		// 保存当前的编号		codeListDao.saveOrUpdate(sysCodeList);	}	@Override	public List<SysCodeList> findByType(String type) {		Assert.notNull(type);		return codeListDao.findByType(type);	}}