package itaf.framework.business.platform.service.impl;import itaf.framework.business.base.service.impl.BaseServiceImpl;import itaf.framework.business.platform.service.ISysCodeTypeService;import itaf.framework.core.common.PageResult;import itaf.framework.core.common.QueryCriteria;import itaf.framework.domain.platform.SysCodeType;import itaf.framework.persistence.platform.dao.ISysCodeTypeDao;import itaf.framework.persistence.util.HqlUtils;import java.util.List;import java.util.Map;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service("sysCodeTypeServiceImpl")public class SysCodeTypeServiceImpl extends BaseServiceImpl implements		ISysCodeTypeService {	@Autowired	private ISysCodeTypeDao codeTypeDao = null;	public SysCodeType doCreate(SysCodeType sysCodeType) {		codeTypeDao.saveOrUpdate(sysCodeType);		return sysCodeType;	}	public void doDelete(SysCodeType sysCodeType) {		codeTypeDao.remove(sysCodeType);	}	public SysCodeType findById(Long id) {		return codeTypeDao.findById(id);	}	public PageResult<SysCodeType> findByCriteria(QueryCriteria criteria) {		String queryEntry = "select tct";		String[] whereBodies = new String[] { "tct.type like :typeLike",				"tct.nameZh like :nameZhLike" };		String fromJoinSubClause = "from SysCodeType tct";		Map<String, Object> params = criteria.getQueryCondition();		String orderField = criteria.getOrderField();		String orderDirection = criteria.getOrderDirection();		String hql = HqlUtils.generateHql(queryEntry, fromJoinSubClause,				whereBodies, orderField, orderDirection, params);		int pageSize = criteria.getPageSize();		int startIndex = criteria.getStartIndex();		PageResult<SysCodeType> result = (PageResult<SysCodeType>) codeTypeDao				.query(hql, HqlUtils.generateCountHql(hql, null), params,						startIndex, pageSize);		return result;	}	public List<SysCodeType> findAll() {		return codeTypeDao.findAll();	}	public SysCodeType findByType(String codeType) {		SysCodeType type = new SysCodeType();		type.setCodeType(codeType);		List<SysCodeType> result = codeTypeDao.find(type);		if (result != null && !result.isEmpty()) {			return result.get(0);		}		return null;	}}