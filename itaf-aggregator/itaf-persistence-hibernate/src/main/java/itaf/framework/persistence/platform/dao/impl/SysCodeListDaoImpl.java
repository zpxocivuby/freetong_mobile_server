package itaf.framework.persistence.platform.dao.impl;import itaf.framework.domain.platform.SysCodeList;import itaf.framework.persistence.base.dao.impl.BaseDaoImpl;import itaf.framework.persistence.platform.dao.ISysCodeListDao;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.stereotype.Repository;import org.springframework.util.Assert;/** * 添加了根据名称查找值和根据值查找名称 *  * @author XINXIN *  */@Repository("sysCodeListDaoImpl")public class SysCodeListDaoImpl extends BaseDaoImpl<SysCodeList> implements		ISysCodeListDao {	public SysCodeList findByCodeValue(String type, String codeValue) {		String hql = " from SysCodeList c where c.sysCodeType.codeType=:codeType"				+ " and c.codeValue=:codeValue";		Map<String, Object> params = new HashMap<String, Object>();		params.put("codeType", type);		params.put("codeValue", codeValue);		List<SysCodeList> codeLists = this.query(hql, params);		if (codeLists != null && codeLists.size() > 0) {			return codeLists.get(0);		}		return null;	}	public SysCodeList findByName(String type, String name) {		Assert.notNull(type);		Assert.notNull(name);		String hql = " from SysCodeList c where c.sysCodeType.codeType=:codeType"				+ " and (c.nameZh=:name or c.nameEn=:name )";		Map<String, Object> params = new HashMap<String, Object>();		params.put("codeType", type);		params.put("name", name);		List<SysCodeList> codeLists = this.query(hql, params);		if (codeLists != null && codeLists.size() > 0) {			return codeLists.get(0);		}		return null;	}	public List<SysCodeList> findByType(String type) {		String hql = " from SysCodeList c where c.sysCodeType.codeType=:type order by c.sortNo";		Map<String, Object> params = new HashMap<String, Object>();		params.put("type", type);		return this.query(hql, params);	}	public void updateSortNo4Create(int currSortNo, Long codeTypeId) {		String sql = "update SYS_CODE_LIST scl set scl.SORT_NO = (scl.SORT_NO + 1) "				+ "where scl.SYS_CODE_TYPE_ID=:codeTypeId and scl.SORT_NO >=:currSortNo  ";		Map<String, Object> params = new HashMap<String, Object>();		params.put("currSortNo", currSortNo);		params.put("codeTypeId", codeTypeId);		this.sqlExecute(sql, params);	}	public void updateSortNo4Delete(int currSortNo, Long codeTypeId) {		String sql = "update SYS_CODE_LIST scl set scl.SORT_NO = (scl.SORT_NO - 1) "				+ "where scl.SYS_CODE_TYPE_ID=:codeTypeId and scl.SORT_NO >:currSortNo  ";		Map<String, Object> params = new HashMap<String, Object>();		params.put("currSortNo", currSortNo);		params.put("codeTypeId", codeTypeId);		this.sqlExecute(sql, params);	}	public void updateSortNo4Update(int oldSortNo, int currSortNo,			Long codeTypeId) {		if (oldSortNo == currSortNo) {			return;		}		String sql = "update SYS_CODE_LIST scl";		if (oldSortNo > currSortNo) {			sql += " set scl.SORT_NO = (scl.SORT_NO + 1) "					+ " where scl.SYS_CODE_TYPE_ID=:codeTypeId and "					+ " (scl.SORT_NO >= :currSortNo and scl.SORT_NO < :oldSortNo) ";		} else {			sql += " set scl.SORT_NO = (scl.SORT_NO - 1) "					+ " where scl.SYS_CODE_TYPE_ID=:codeTypeId and "					+ " (scl.SORT_NO <= :currSortNo and scl.SORT_NO > :oldSortNo ) ";		}		Map<String, Object> params = new HashMap<String, Object>();		params.put("oldSortNo", oldSortNo);		params.put("currSortNo", currSortNo);		params.put("codeTypeId", codeTypeId);		this.sqlExecute(sql, params);	}	public int findSortNoById(Long codeListId) {		String hql = "from SysCodeList scl where scl.id=:codeListId";		Map<String, Object> params = new HashMap<String, Object>();		params.put("codeListId", codeListId);		List<SysCodeList> result = this.query(hql, params);		if (result != null && result.size() > 0) {			return result.get(0).getSortNo().intValue();		}		return 0;	}	public Long findMaxSortNoByCodeType(String codeType) {		String hql = "from SysCodeList scl where scl.sysCodeType.codeType=:codeType order by scl.sortNo desc";		Map<String, Object> params = new HashMap<String, Object>();		params.put("codeType", codeType);		List<SysCodeList> result = this.query(hql, params);		if (result != null && result.size() > 0) {			return result.get(0).getSortNo();		}		return null;	}	public List<SysCodeList> findByTypeId(Long codeTypeId) {		String hql = "from SysCodeList scl where scl.sysCodeType.id=:codeTypeId order by scl.sortNo desc";		Map<String, Object> params = new HashMap<String, Object>();		params.put("codeTypeId", codeTypeId);		return this.query(hql, params);	}}